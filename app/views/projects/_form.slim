/ Copyright 2014 Square Inc.
/
/    Licensed under the Apache License, Version 2.0 (the "License");
/    you may not use this file except in compliance with the License.
/    You may obtain a copy of the License at
/
/        http://www.apache.org/licenses/LICENSE-2.0
/
/    Unless required by applicable law or agreed to in writing, software
/    distributed under the License is distributed on an "AS IS" BASIS,
/    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/    See the License for the specific language governing permissions and
/    limitations under the License.

= form_for @project do |f|
  .row
    .eight.columns
      fieldset 
        legend General Settings
        .control-group 
          = f.label :name, class: 'control-label'
          .controls
            = f.text_field :name, title: 'Test test test'

        .control-group
          = f.label :repository_url, class: 'control-label'
          .controls
            = f.text_field :repository_url, class: 'tooltip-parent', :'data-tooltip' => '#repository_url_tooltip'
            .tooltip#repository_url_tooltip
              | This is the URL you use to check out the project in Git, 
              strong not
              |  the GitHub website URL.

        .control-group
          = f.label :webhook_url, class: 'control-label'
          .controls
            = f.text_field :webhook_url, class: 'tooltip-parent', :'data-tooltip' => '#webhook_url_tooltip'
            .tooltip#webhook_url_tooltip
              | This URL will be posted to when a commit is marked as 'ready'. HTTP Post body will contain 
              tt commit_revision
              | , 
              tt project_name
              |  and 
              tt ready
              |  status.

      fieldset 
        legend Locale Settings
        .control-group 
          = f.label :base_rfc5646_locale, class: 'control-label'
          .controls
            = f.text_field :base_rfc5646_locale, class: 'locale-field tooltip-parent',\ 
                                                 :'data-tooltip' => '#base_rfc5646_tooltip' 
            .tooltip#base_rfc5646_tooltip
              | The locale that the original copy is written in.

        .control-group
          = f.label :required_rfc5646_locales, 'Required Localizations', class: 'control-label'
          .controls
            = f.content_tag_field 'div', :required_rfc5646_locales, \
              class: 'array-field', 'data-value' => @project.required_rfc5646_locales.to_json

        .control-group
          = f.label :other_rfc5646_locales, 'Other Localizations', class: 'control-label'
          .controls
            = f.content_tag_field 'div', :other_rfc5646_locales, \
              class: 'array-field', 'data-value' => @project.other_rfc5646_locales.to_json
            / .tooltip#target_rfc5646_tooltip
            /   | A comma-delimited list of locales to target. Include any of 
            /   - if PseudoTranslator.supported_rfc5646_locales.count > 1
            /     - PseudoTranslator.supported_rfc5646_locales.each do |l|
            /       code = l
            /       |  
            /   | to generate pseudo-translations.

      fieldset 
        legend Import Settings

        / Skip Imports
        .control-group 
          = f.label :skip_imports, "Skip These Importers", class: 'control-label'
            / create a hidden field first so that if all checkboxes are unchecked, we at least get an empty array
          = hidden_field_tag 'project[skip_imports][]', ''
          - Importer::Base.implementations.each_with_index do |importer, index|
            .controls.checkboxes
              = label_tag "project_skip_imports_#{index}", class: 'checkbox'
                = importer.human_name
              = check_box_tag "project[skip_imports][]", importer.ident, @project.skip_imports.include?(importer.ident), id: "project_skip_imports_#{index}"
          / p.help-block
          / | A comma-delimited list of locales to target. Include 
          / - if PseudoTranslator.supported_rfc5646_locales.count > 1
          /   | any of 
          / - PseudoTranslator.supported_rfc5646_locales.each do |l|
          /   code l
          / |  to generate pseudo-translations.
          /

        .control-group
          = f.label :watched_branches, class: 'control-label'
          .controls
            / = f.text_field :watched_branches
            / .list-field
            = f.content_tag_field 'div', :watched_branches, class: 'array-field', 'data-value' => @project.watched_branches.to_json
            / p.help-block New commits that appear on any of these branches will be automatically imported.
      fieldset 
        legend Precompilation and Caching

        .control-group
          = f.label :cache_localization, class: 'control-label'
          .controls.checkboxes
            = f.check_box :cache_localization 
            span
              / = label_tag :cache_localization, class: 'checkbox'
              - localizers = Localizer::Base.implementations.map(&:human_name).sort.to_sentence
              | The following localizers will be included in the tarball: #{localizers}.
        /   .controls
            / = f.check_box :cache_localization
            / - localizers = Localizer::Base.implementations.map(&:human_name).sort.to_sentence
            / p.help-block The following localizers will be included in the tarball: #{localizers}.
          
        .control-group
          = f.label :cache_manifest_formats, class: 'control-label'
          / create a hidden field first so that if all checkboxes are unchecked, we at least get an empty array
          = hidden_field_tag 'project[cache_manifest_formats][]', ''
          - Exporter::Base.implementations.select(&:multilingual?).each_with_index do |importer, index|
            .controls.checkboxes
              = label_tag "project_cache_manifest_formats_#{index}", class: 'checkbox'
                = importer.human_name
              = check_box_tag "project[cache_manifest_formats][]", importer.request_format.to_s, @project.cache_manifest_formats.include?(importer.request_format.to_s), id: "project_cache_manifest_formats_#{index}"


    .eight.columns.right-side

      fieldset 
        legend Key Whitelisting and Blacklisting
        
        .space-group
          = f.label :key_inclusions, class: 'control-label'
          p.help-block List the keys that must be translated. If at least one inclusion is given, keys not matching will not be translated. UNIX-style globs are supported.
          .controls 
            = f.content_tag_field 'div', :key_inclusions, class: 'array-field', 'data-value' => @project.key_inclusions.to_json
          
        
        .space-group        
          = f.label :key_exclusions, class: 'control-label'
          p.help-block List the keys you do not want to be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_exclusions, class: 'array-field', 'data-value' => @project.key_exclusions.to_json
          
        
        .space-group        
          = f.label :key_locale_inclusions, class: 'control-label'
          p.help-block List the keys that must be translated. If at least one inclusion is given, keys not matching will not be translated. UNIX-style globs are supported."
          .controls
            = f.content_tag_field 'div', :key_locale_inclusions, class: 'hash-field', 'data-value' => @project.key_locale_inclusions.to_json
          
        
        .space-group        
          = f.label :key_locale_exclusions, class: 'control-label'
          p.help-block List the keys you do not want to be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_locale_exclusions, class: 'hash-field', 'data-value' => @project.key_locale_exclusions.to_json

          
      


      fieldset 
        legend Path Whitelisting and Blacklisting
        
        .space-group        
          = f.label :only_paths, class: 'control-label'
          p.help-block List paths that importers will search for strings. Paths not in this list will not be searched.
          .controls
            = f.content_tag_field 'div', :only_paths, class: 'array-field', 'data-value' => @project.only_paths.to_json
        
        
        .space-group        
          = f.label :skip_paths, class: 'control-label'
          p.help-block List paths you do not want any importers to scan under for strings.
          .controls
            = f.content_tag_field 'div', :skip_paths, class: 'array-field', 'data-value' => @project.skip_paths.to_json
          
        
        .space-group        
          = f.label :only_importer_paths, class: 'control-label'
          p.help-block List paths for specific importers to search on. Paths not in this list will not be searched by that importer.
          .controls
            = f.content_tag_field 'div', :only_importer_paths, class: 'hash-field', 'data-value' => @project.only_importer_paths.to_json
            
        
        .space-group        
          = f.label :skip_importer_paths, class: 'control-label'
          p.help-block List paths that you want specific importers to skip.
          .controls
            = f.content_tag_field 'div', :skip_importer_paths, class: 'hash-field', 'data-value' => @project.skip_importer_paths.to_json

  .form-actions
    = f.submit class: 'primary', value: 'save'
    button.default href=projects_url Cancel           
          
- content_for :javascript do 
  script type='text/javascript'
    - file_name = 'views/projects/_form'
    - js_coffee_erb_file  = Rails.root.join('app', file_name + '.js.coffee.erb')
    = raw(CoffeeScript.compile(ERB.new(File.read(js_coffee_erb_file)).result(binding))) if File.exist?(js_coffee_erb_file)

