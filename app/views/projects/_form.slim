/ Copyright 2014 Square Inc.
/
/    Licensed under the Apache License, Version 2.0 (the "License");
/    you may not use this file except in compliance with the License.
/    You may obtain a copy of the License at
/
/        http://www.apache.org/licenses/LICENSE-2.0
/
/    Unless required by applicable law or agreed to in writing, software
/    distributed under the License is distributed on an "AS IS" BASIS,
/    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/    See the License for the specific language governing permissions and
/    limitations under the License.

= form_for @project do |f|
  .row
    .eight.columns
      fieldset
        legend General Settings
        .control-group
          = f.label :name, class: 'control-label'
          .controls
            = f.text_field :name

        .control-group
          = f.label :repository_url, class: 'control-label'
          .controls
            = f.text_field :repository_url, class: 'tooltip-parent', :'data-tooltip' => '#repository_url_tooltip'
            .qtip-tooltip#repository_url_tooltip
              | This is the URL you use to check out the project in Git,
              strong not
              |  the GitHub website URL.

        .control-group
          = f.label :github_webhook_url, class: 'control-label'
          .controls
            = f.text_field :github_webhook_url, class: 'tooltip-parent', :'data-tooltip' => '#github_webhook_url_tooltip'
            .qtip-tooltip#github_webhook_url_tooltip
              | This URL will be posted to when a commit is marked as 'ready'. HTTP Post body will contain
              tt commit_revision
              | ,
              tt project_name
              |  and
              tt ready
              |  status.
        .control-group
          = f.label :stash_webhook_url, class: 'control-label'
          .controls
            = f.text_field :stash_webhook_url, class: 'tooltip-parent', :'data-tooltip' => '#stash_webhook_url_tooltip'
            .qtip-tooltip#stash_webhook_url_tooltip
              | This URL will be posted to when a commit's status is changed.
                It is used to update the build status of a commit and is primarily meant
                to integrate with Stash.  HTTP Post body will contain
              tt state
              | ,
              tt key
              | ,
              tt name
              | ,
              tt url
              |  and,
              tt description
              |  .
        .control-group
          = f.label :article_webhook_url, class: 'control-label'
          .controls
            = f.text_field :article_webhook_url, class: 'tooltip-parent', :'data-tooltip' => '#article_webhook_url_tooltip'
            .qtip-tooltip#article_webhook_url_tooltip
              ' This URL will be posted to when an article's translation gets ready.
                It is used to notify client systems about translations getting available to be consumed.  HTTP Post body will contain
              tt article_name
              |,
              tt'  project_name
              ' and
              tt' ready
              '  status.
        .control-group
          = f.label :job_type, class: 'control-label'
          - Project.job_types.each do |k,v|
            - next if !Shuttle::Configuration.features.enable_assets && k == 'asset'
            .controls.checkboxes_and_radios
              = f.label "job_type_#{v}", class: 'radio'
                = k.titlecase
              = f.radio_button :job_type, k

      fieldset
        legend Locale Settings
        .control-group
          = f.label :base_rfc5646_locale, class: 'control-label'
          .controls
            = f.text_field :base_rfc5646_locale, class: 'locale-field tooltip-parent',\
                                                 :'data-tooltip' => '#base_rfc5646_tooltip',\
                                                 disabled: !current_user.try!(:admin?)
            .qtip-tooltip#base_rfc5646_tooltip
              | The locale that the original copy is written in.

        .control-group
          = f.label :required_rfc5646_locales, 'Required Localizations', class: 'control-label'
          .controls
            - if current_user.try!(:admin?)
              = f.content_tag_field 'div', :required_rfc5646_locales, \
                class: 'array-field', 'data-value' => @project.required_rfc5646_locales.to_json
            - else
              - @project.required_rfc5646_locales.each do |locale|
                .spaced-field: input type="text" class='locale-field' value=locale disabled=true

        .control-group
          = f.label :other_rfc5646_locales, 'Other Localizations', class: 'control-label'
          .controls
            - if current_user.try!(:admin?)
              = f.content_tag_field 'div', :other_rfc5646_locales, \
                class: 'array-field', 'data-value' => @project.other_rfc5646_locales.to_json
            - else
              - @project.other_rfc5646_locales.each do |locale|
                .spaced-field: input type="text" class='locale-field' value=locale disabled=true

      fieldset
        legend Import Settings

        / Skip Imports
        .control-group
          = f.label :use_imports, "Use These Importers", class: 'control-label'
            / create a hidden field first so that if all checkboxes are unchecked, we at least get an empty array
          = hidden_field_tag 'project[use_imports][]', ''
          - Importer::Base.implementations.sort_by(&:human_name).each_with_index do |importer, index|
            .controls.checkboxes_and_radios
              = label_tag "project_use_imports_#{index}", class: 'checkbox'
                = importer.human_name
              = check_box_tag "project[use_imports][]", importer.ident, !@project.persisted? ? false : !@project.skip_imports.include?(importer.ident), id: "project_use_imports_#{index}"
          / p.help-block
          / | A comma-delimited list of locales to target. Include
          / - if PseudoTranslator.supported_rfc5646_locales.count > 1
          /   | any of
          / - PseudoTranslator.supported_rfc5646_locales.each do |l|
          /   code l
          / |  to generate pseudo-translations.
          /

        .control-group
          = f.label :watched_branches, class: 'control-label'
          .controls
            / = f.text_field :watched_branches
            / .list-field
            = f.content_tag_field 'div', :watched_branches, class: 'array-field', 'data-value' => @project.watched_branches.to_json
            p.help-block New commits that appear on any of these branches will be automatically imported.

        .control-group
          = f.label :touchdown_branch, class: 'control-label'
          .controls
            = f.text_field :touchdown_branch
            p.help-block
              | Any time a commit from the <strong>first</strong> watched branch
              |  finishes translation, the head of this branch will be advanced
              |  to that commit. See the developer guide for more information.

        .control-group
          = f.label :manifest_directory, class: 'control-label'
          .controls
            = f.text_field :manifest_directory
            p.help-block
              | If this directory is specified, Shuttle will automatically create
              |  a new commit that contains your translated manifest in the specified
              |  directory and push it to your touchdown branch.

        .control-group
          = f.label :manifest_filename, class: 'control-label'
          .controls
            = f.text_field :manifest_filename
            p.help-block
              | If the filename is specified, then Shuttle will create a
              |  file using the given filename.  Otherwise, it will default to
              |  manifest.[default_file_extension]
      fieldset
        legend Export Settings

        .control-group
          = f.label :default_manifest_format, class: 'control-label'
          .controls.checkboxes_and_radios
            = label_tag "project_default_manifest_format_none", 'None'
            = radio_button_tag 'project[default_manifest_format]', '', @project.default_manifest_format.blank?
          - Exporter::Base.implementations.select(&:multilingual?).sort_by(&:human_name).each_with_index do |importer, index|
            .controls.checkboxes_and_radios
              = f.label "default_manifest_format_#{index}", class: 'radio'
                = importer.human_name
              = f.radio_button :default_manifest_format, importer.request_format.to_s


    .eight.columns.right-side
      .flipswitch
        input#key-flipswitch.flipswitch-checkbox checked=@project.key_inclusions.empty? name="project[use_key_exclusions]" type="checkbox"
          label.flipswitch-label for="key-flipswitch"
            .flipswitch-inner
            .flipswitch-switch
      fieldset
        legend Key Filtering

        .space-group#key-flipswitch-unchecked
          = f.label :key_inclusions, class: 'control-label'
          p.help-block List the keys that must be translated. If at least one inclusion is given, keys not matching will not be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_inclusions, class: 'array-field', 'data-value' => @project.key_inclusions.to_json

        .space-group#key-flipswitch-checked
          = f.label :key_exclusions, class: 'control-label'
          p.help-block List the keys you do not want to be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_exclusions, class: 'array-field', 'data-value' => @project.key_exclusions.to_json

      fieldset
        legend Locale Key Filtering

        .space-group
          = f.label :key_locale_inclusions, class: 'control-label'
          p.help-block List the keys that must be translated. If at least one inclusion is given, keys not matching will not be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_locale_inclusions, class: 'hash-field', 'data-value' => @project.key_locale_inclusions.to_json


        .space-group
          = f.label :key_locale_exclusions, class: 'control-label'
          p.help-block List the keys you do not want to be translated. UNIX-style globs are supported.
          .controls
            = f.content_tag_field 'div', :key_locale_exclusions, class: 'hash-field', 'data-value' => @project.key_locale_exclusions.to_json


      .flipswitch
        input#path-flipswitch.flipswitch-checkbox checked=@project.only_paths.empty? name="project[use_skip_paths]" type="checkbox"
          label.flipswitch-label for="path-flipswitch"
            .flipswitch-inner
            .flipswitch-switch
      fieldset
        legend Path Filtering

        .space-group#path-flipswitch-unchecked
          = f.label :only_paths, class: 'control-label'
          p.help-block List paths that importers will search for strings. Paths not in this list will not be searched.
          .controls
            = f.content_tag_field 'div', :only_paths, class: 'array-field', 'data-value' => @project.only_paths.to_json


        .space-group#path-flipswitch-checked
          = f.label :skip_paths, class: 'control-label'
          p.help-block List paths you do not want any importers to scan under for strings.
          .controls
            = f.content_tag_field 'div', :skip_paths, class: 'array-field', 'data-value' => @project.skip_paths.to_json

      fieldset
        legend Importer Path Filtering

        .space-group
          = f.label :only_importer_paths, class: 'control-label'
          p.help-block List paths for specific importers to search on. Paths not in this list will not be searched by that importer.
          .controls
            = f.content_tag_field 'div', :only_importer_paths, class: 'hash-field', 'data-value' => @project.only_importer_paths.to_json


        .space-group
          = f.label :skip_importer_paths, class: 'control-label'
          p.help-block List paths that you want specific importers to skip.
          .controls
            = f.content_tag_field 'div', :skip_importer_paths, class: 'hash-field', 'data-value' => @project.skip_importer_paths.to_json



  - if current_user.admin? && @project.persisted?
    .header.advanced_actions_header
      h1 Advanced
    hr.divider

    .row
      .eight.columns
        fieldset
          legend Multi Locale Translations

          .space-group
            = f.label :disable_locale_association_checkbox_settings, class: 'control-label'
            .controls
              = f.check_box :disable_locale_association_checkbox_settings

          .space-group
            = link_to "Mass Copy Translations From One Locale Into Another", setup_mass_copy_translations_project_url

          .space-group
            = link_to "Export Project Translations as TMX", tmx_project_url

    - if @project.article?
      .row
        .eight.columns
          fieldset
            legend Article API

            .space-group
              strong Project Id: #{@project.id}

            .space-group
              strong API Token:
              .controls
                code
                  = @project.api_token

  .form-actions
    = f.submit class: 'primary', value: 'save', data: { confirm: 'Are you sure?  Changes are irreversible.'}
    button.default href=projects_url Cancel

- content_for :javascript do
  script type='text/javascript'
    - file_name = 'views/projects/_form'
    - js_coffee_erb_file  = Rails.root.join('app', file_name + '.js.coffee.erb')
    = raw(CoffeeScript.compile(ERB.new(File.read(js_coffee_erb_file)).result(binding))) if File.exist?(js_coffee_erb_file)
